# Script to monitor Cisco Secure Client connection and connect if needed
# This script is automatically generated by the installer with your custom configuration

# Log function
function Write-Log {
    param (
        [string]$Message,
        [bool]$Display = $true
    )
    
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $logMessage = "[$timestamp] $Message"
    
    # Append to log file
    $scriptsFolder = Join-Path $env:USERPROFILE "Scripts"
    $logPath = Join-Path $scriptsFolder "CiscoSecureClientMonitor.log"
    
    # Create log file if it doesn't exist
    if (-not (Test-Path $logPath)) {
        New-Item -Path $logPath -ItemType File -Force | Out-Null
    }
    
    # Limit log file size to 5MB
    if ((Get-Item $logPath -ErrorAction SilentlyContinue).Length -gt 5MB) {
        $backupPath = "$logPath.bak"
        if (Test-Path $backupPath) { Remove-Item $backupPath -Force }
        Rename-Item -Path $logPath -NewName "$logPath.bak" -Force
        New-Item -Path $logPath -ItemType File -Force | Out-Null
        Add-Content -Path $logPath -Value "[$timestamp] Log file rotated due to size limit"
    }
    
    Add-Content -Path $logPath -Value $logMessage
    
    # Only display if console output is desired
    if ($Display -and $Host.UI.RawUI.WindowTitle -notlike "*Hidden*") {
        Write-Host $logMessage
    }
}

# Function to connect to VPN using CLI
function Connect-VpnCli {
    param (
        [string]$VpnConnectionName
    )
    
    try {
        Write-Log "Initiating CLI connection to $VpnConnectionName"
        
        # First attempt: Silent connection with credentials file
        $tempCredFile = Join-Path $env:TEMP "vpn_creds.txt"
        Set-Content -Path $tempCredFile -Value "" -Force
        
        $silentArgs = "connect `"$VpnConnectionName`" -s < `"$tempCredFile`""
        $silentProcess = Start-Process $vpnCliPath -ArgumentList $silentArgs -WindowStyle Hidden -PassThru -Wait
        Remove-Item $tempCredFile -Force -ErrorAction SilentlyContinue
        
        if ($silentProcess.ExitCode -eq 0) {
            Write-Log "Silent CLI connection successful"
            return $true
        }
        
        # Second attempt: Interactive connection
        Write-Log "Silent connection failed (Code: $($silentProcess.ExitCode)), trying interactive..."
        $interactiveProcess = Start-Process $vpnCliPath -ArgumentList "connect `"$VpnConnectionName`"" -NoNewWindow -PassThru -Wait
        
        if ($interactiveProcess.ExitCode -eq 0) {
            Write-Log "Interactive CLI connection successful"
            return $true
        }
        
        Write-Log "CLI connection failed with code: $($interactiveProcess.ExitCode)"
        return $false
        
    } catch {
        Write-Log "CLI connection error: $_"
        return $false
    }
}

# Catch all unhandled exceptions
try {
    Write-Log "Starting Cisco Secure Client connection check"

    # Configuration variables - these will be replaced by the installer
    $vpnConnectionName = "##VPN_CONNECTION_NAME##"
    $dnsSuffix = "##DNS_SUFFIX##"
    $pingHost = "##PING_HOST##"
    $useUiClient = ##USE_UI_CLIENT##  # Boolean value: true for UI client, false for CLI client

    # Check if already connected
    $connected = Test-VPNConnection -DnsSuffix $dnsSuffix -PingHost $pingHost
    if ($connected) {
        Write-Log "Already connected to $dnsSuffix network"
        exit 0
    }

    Write-Log "Not connected to $dnsSuffix network. Attempting to connect..."

    # Path to Cisco Secure Client executables
    $vpnCliPath = "C:\Program Files (x86)\Cisco\Cisco Secure Client\vpncli.exe"
    $uiPath = "C:\Program Files (x86)\Cisco\Cisco Secure Client\UI\csc_ui.exe"

    # Verify the selected client exists
    if ($useUiClient) {
        if (-not (Test-Path $uiPath)) {
            Write-Log "ERROR: Cisco Secure Client UI not found at $uiPath. Falling back to CLI."
            $useUiClient = $false
        }
    }

    if (-not (Test-Path $vpnCliPath)) {
        Write-Log "ERROR: Cisco Secure Client CLI not found at $vpnCliPath"
        exit 1
    }

    # First, check if we need to reset Cisco Secure Client
    $stateOutput = & $vpnCliPath "state" 2>&1
    if ($stateOutput -match "Connect capability is unavailable") {
        Write-Log "Detected 'Connect capability is unavailable' error. Attempting to reset Cisco Secure Client."
        $resetSuccess = Reset-CiscoSecureClient -VpnConnectionName $vpnConnectionName -UseUiClient $useUiClient
        
        if ($resetSuccess) {
            # If reset was successful and automatically reconnected, verify the connection
            $connected = Test-VPNConnection -DnsSuffix $dnsSuffix -PingHost $pingHost
            if ($connected) {
                Write-Log "Connection to $dnsSuffix network was established during reset"
                exit 0
            }
        } else {
            # If reset wasn't successful, try one more time with more aggressive approach
            Write-Log "First reset attempt did not resolve the issue. Trying more aggressive reset..."
            
            # Create and execute a more aggressive reset script with admin privileges
            $aggressiveResetScript = Join-Path $env:TEMP "AggressiveVpnReset.ps1"
            @"
# Stop ALL Cisco processes
Get-Process | Where-Object { `$_.Name -like "*cisco*" -or `$_.Name -like "*vpn*" } | ForEach-Object {
    Stop-Process -Id `$_.Id -Force -ErrorAction SilentlyContinue
}

# Stop and restart the VPN service with delay
Stop-Service -Name "vpnagent" -Force -ErrorAction SilentlyContinue
Start-Sleep -Seconds 7
Start-Service -Name "vpnagent" -ErrorAction SilentlyContinue

# Start UI to re-initialize (optional)
Start-Sleep -Seconds 10
Start-Process -FilePath "C:\Program Files (x86)\Cisco\Cisco Secure Client\UI\csc_ui.exe" -NoNewWindow
Start-Sleep -Seconds 10
Get-Process -Name "csc_ui" -ErrorAction SilentlyContinue | Stop-Process -Force -ErrorAction SilentlyContinue
"@ | Set-Content -Path $aggressiveResetScript
            
            try {
                Start-Process powershell.exe -ArgumentList "-NoProfile -ExecutionPolicy Bypass -File `"$aggressiveResetScript`"" -Verb RunAs -Wait
                Start-Sleep -Seconds 20
                Write-Log "Service restart attempted with elevation"
                
                # Clean up
                if (Test-Path $aggressiveResetScript) { 
                    Remove-Item -Path $aggressiveResetScript -Force -ErrorAction SilentlyContinue 
                }
            } catch {
                Write-Log "ERROR: Failed to restart service with elevation: $_"
            }
        }
        
        # Try to restart the main Cisco UI as a final step
        try {
            if (Test-Path $uiPath) {
                Write-Log "Starting Cisco Secure Client UI"
                Start-Process -FilePath $uiPath -NoNewWindow
                Start-Sleep -Seconds 10
                Write-Log "Cisco Secure Client UI started"
                
                # Close the UI after it initializes
                $uiProc = Get-Process -Name "csc_ui" -ErrorAction SilentlyContinue
                if ($uiProc) {
                    Write-Log "Closing Cisco Secure Client UI after initialization"
                    Stop-Process -Name "csc_ui" -Force -ErrorAction SilentlyContinue
                    Start-Sleep -Seconds 3
                }
            }
        } catch {
            Write-Log "WARNING: Error managing Cisco Secure Client UI: $_"
        }
        
        # Final verification and attempt to connect
        if (-not [string]::IsNullOrEmpty($vpnConnectionName)) {
            Write-Log "Attempting immediate connection to $vpnConnectionName after reset"
            try {
                if ($useUiClient -and (Test-Path $uiPath)) {
                    # Try to connect using UI
                    Write-Log "Launching UI client for reconnection"
                    Start-Process -FilePath $uiPath -ArgumentList """$vpnConnectionName""" -NoNewWindow
                    Start-Sleep -Seconds 10
                    
                    # The UI client doesn't provide a direct way to check connection state via the process
                    # So we'll use vpncli.exe to check the state
                    $stateOutput = & $vpnCliPath "state" 2>&1
                    if ($stateOutput -match "state: Connected") {
                        Write-Log "Successfully reconnected to $vpnConnectionName after reset using UI client"
                        return $true
                    } else {
                        Write-Log "UI reconnection status unclear, checking connection state..."
                    }
                } 
                elseif (Test-Path $vpnCliPath) {
                    # Try to connect using CLI
                    Start-Process -FilePath $vpnCliPath -ArgumentList "connect `"$vpnConnectionName`"" -NoNewWindow -Wait
                    Start-Sleep -Seconds 5
                    
                    # Check if connection was successful
                    $stateOutput = & $vpnCliPath "state" 2>&1
                    if ($stateOutput -match "state: Connected") {
                        Write-Log "Successfully reconnected to $vpnConnectionName after reset using CLI"
                        return $true
                    } else {
                        Write-Log "Reconnection attempt completed, but state is not yet connected"
                    }
                }
            } catch {
                Write-Log "ERROR: Failed reconnection attempt after reset: $_"
            }
        }
        
        # Return value indicates whether the reset was likely successful
        $stateOutput = & $vpnCliPath "state" 2>&1
        if ($stateOutput -match "Connect capability is unavailable") {
            Write-Log "WARNING: Connect capability is still unavailable after reset"
            return $false
        } else {
            Write-Log "Reset completed successfully, connect capability should be available"
            return $true
        }
    }

    # Update the main connection logic
    $maxAttempts = 7  # Increased from 5
    $attemptDelay = 12 # Seconds between attempts
    $connectionEstablished = $false

    # Enhanced connection check with multiple verification methods
    function Test-VPNConnection {
        param (
            [string]$DnsSuffix,
            [string]$PingHost
        )
        
        $checks = @{
            DNS = $false
            Ping = $false
            Port = $false
        }
        
        try {
            # Check DNS suffix
            $checks.DNS = [bool](Get-NetAdapter | Where-Object { 
                $_.Status -eq "Up" -and 
                (Get-DnsClient -InterfaceIndex $_.ifIndex -ErrorAction SilentlyContinue).ConnectionSpecificSuffix -eq $DnsSuffix
            })
            
            # Check ping response
            $checks.Ping = Test-Connection -ComputerName $PingHost -Count 2 -Quiet -ErrorAction SilentlyContinue
            
            # Check HTTPS port connectivity
            $checks.Port = (Test-NetConnection -ComputerName $PingHost -Port 443 -InformationLevel Quiet).TcpTestSucceeded
            
            Write-Log "Connection checks - DNS: $($checks.DNS), Ping: $($checks.Ping), Port: $($checks.Port)"
            
            return $checks.DNS -or $checks.Ping -or $checks.Port
        } catch {
            Write-Log "Connection check error: $_"
            return $false
        }
    }

    # Modified main connection loop
    for ($attempt = 1; $attempt -le $maxAttempts; $attempt++) {
        Write-Log "=== Connection attempt $attempt/$maxAttempts ==="
        
        # First try CLI connection
        if (Connect-VpnCli -VpnConnectionName $vpnConnectionName) {
            Write-Log "CLI connection reported success. Verifying..."
            Start-Sleep -Seconds 10
            $connectionEstablished = Test-VPNConnection -DnsSuffix $dnsSuffix -PingHost $pingHost
            if ($connectionEstablished) {
                break
            }
        }
        
        # If CLI failed, try UI connection
        if (-not $connectionEstablished) {
            Write-Log "Attempting UI connection..."
            if (Connect-VpnUI -VpnConnectionName $vpnConnectionName) {
                Start-Sleep -Seconds 15  # Give UI more time to connect
                $connectionEstablished = Test-VPNConnection -DnsSuffix $dnsSuffix -PingHost $pingHost
                if ($connectionEstablished) {
                    break
                }
            }
        }
        
        # Final fallback: Aggressive reset and retry
        if (-not $connectionEstablished -and $attempt -eq $maxAttempts) {
            Write-Log "Performing final aggressive reset..."
            Reset-CiscoSecureClient -VpnConnectionName $vpnConnectionName -UseUiClient $true -Aggressive $true
            Start-Sleep -Seconds 20
            $connectionEstablished = Test-VPNConnection -DnsSuffix $dnsSuffix -PingHost $pingHost
        }
        
        if (-not $connectionEstablished -and $attempt -lt $maxAttempts) {
            Write-Log "Waiting $attemptDelay seconds before next attempt..."
            Start-Sleep -Seconds $attemptDelay
        }
    }

    # Final connection handling
    if (-not $connectionEstablished) {
        Write-Log "CRITICAL: All connection attempts failed!"
        exit 1
    }

    Write-Log "Connection successfully established and verified"
    exit 0
} catch {
    Write-Log "CRITICAL ERROR: Unhandled exception: $_"
    Write-Log $_.ScriptStackTrace
    exit 1
}

# Improved Connect-VpnUI function
function Connect-VpnUI {
    param (
        [string]$VpnConnectionName
    )
    
    try {
        Write-Log "Initiating UI connection to $VpnConnectionName"
        
        # Create temporary task XML
        $taskXml = @"
<?xml version="1.0" encoding="UTF-16"?>
<Task version="1.2" xmlns="http://schemas.microsoft.com/windows/2004/02/mit/task">
  <RegistrationInfo>
    <Description>Temp VPN Connection Task</Description>
  </RegistrationInfo>
  <Principals>
    <Principal id="Author">
      <UserId>$($env:USERDOMAIN)\$($env:USERNAME)</UserId>
      <LogonType>InteractiveToken</LogonType>
      <RunLevel>LeastPrivilege</RunLevel>
    </Principal>
  </Principals>
  <Settings>
    <MultipleInstancesPolicy>IgnoreNew</MultipleInstancesPolicy>
    <DisallowStartIfOnBatteries>false</DisallowStartIfOnBatteries>
    <StopIfGoingOnBatteries>false</StopIfGoingOnBatteries>
    <AllowHardTerminate>true</AllowHardTerminate>
    <StartWhenAvailable>false</StartWhenAvailable>
    <RunOnlyIfNetworkAvailable>false</RunOnlyIfNetworkAvailable>
  </Settings>
  <Actions Context="Author">
    <Exec>
      <Command>"$uiPath"</Command>
      <Arguments>"$VpnConnectionName"</Arguments>
    </Exec>
  </Actions>
</Task>
"@
        $taskXmlPath = Join-Path $env:TEMP "CiscoVPNTask.xml"
        Set-Content -Path $taskXmlPath -Value $taskXml -Force
        
        # Create and run task
        schtasks /Create /TN "CiscoTempUIConnect" /XML "$taskXmlPath" /F | Out-Null
        schtasks /Run /TN "CiscoTempUIConnect" | Out-Null
        
        # Wait for connection
        Start-Sleep -Seconds 20
        
        # Cleanup
        schtasks /Delete /TN "CiscoTempUIConnect" /F | Out-Null
        Remove-Item $taskXmlPath -Force -ErrorAction SilentlyContinue
        
        Write-Log "UI connection attempt completed"
        return $true
        
    } catch {
        Write-Log "UI connection error: $_"
        return $false
    }
}
